using OfficeOpenXml;
using System.Text;

namespace TaskManager
{
    internal class Program
    {
        [STAThread]
        private static void Main(string[] args)
        {
            //задаём кодировку
            Console.OutputEncoding = Encoding.Unicode;

            //задаём неизменные параметры
            const bool isDebug = true;//переключатель между режимом дебага и обычным режимом (логирование работает в обоих случаях) 
            const string version = "v1.0.2250 alpha";//строка версии (смотри правила оформления ниже) 
            const string progname = "Task Manager";//строка названия программы (не менять без согласия) 

            /*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            Оформлять строку version в соответствии с правилом:
                1) Первая цифра - реализация. Она не меняется до тех пор, пока ваша часть не будет завершена полностью.
                После полного завершения своей части просто сделать +1
                2) Вторая цифра - счётчик. Перед отправкой каждого нового коммита на гит делать +1.
                После полного завершения счётчик обнуляется.
                3) Третья цифра - текущее время. Перед отправкой каждого нового коммита написать время без ':' (09:30 -> 0930)
            Также перед отправкой коммита написать в сообщении этот номер версии и прописать условный список изменений
            Это всё необходимо для отслеживания версий и в критическом случае возвращения на определённую версию
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /////////////////////////////////////////код ниже трогать запрещено//////////////////////////////////////////////////////

            //настройка для EPPlus 
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

            //константы для файлов 
            string workDir = Directory.GetCurrentDirectory() + @"\data\";
            string daysDir = workDir + @"desks\";
            string logsDir = workDir + @"logs\";


            //подготовка датабазы 
            ApplicationConfiguration.Initialize();
            TaskM program = new(isDebug, new(logsDir, isDebug, new(), progname, version), args);
            DataBase db = program.db;
            if (!File.Exists(workDir + "Data.xlsx")) db.CreateDataList(workDir + "Data.xlsx");
            if (!File.Exists(workDir + "Users.xlsx")) db.CreateUserList(workDir + "Users.xlsx");


            //заполнение данных и проверка на подлинность (непустоту) 
            bool cond1 = true; bool cond2 = true; bool cond3 = true;
            if (!db.FillUsers(workDir + "Users.xlsx"))
            {
                cond1 = false;
                db.LogState("(FU2) Проблема со списком пользователей или ошибка FillUsers()");
            }
            if (!db.FillData(workDir + "Data.xlsx"))
            {
                cond2 = false;
                db.LogState("(Fdata2) Проблема с базовыми данными или ошибка FillData()");
            }
            if (!db.FillDesks(daysDir))
            {
                cond3 = false;
                db.LogState("(FDesks13) Проблема с данными расписания или ошибка FillDesks()");
            }
            if (cond1 && cond2 && cond3) db.LogState($"Конец обработки информации. Имя программы: \"{db.progname}\". Текущая версия программы: \"{db.version}\"");//просто нужно 
            else db.LogState($"(LError1) Возникла проблемы при обработке информации, проверьте лог \"{DateTime.Now:yyyy-MM-dd}.log\"");

            //запуск программы и переход к внутренним методам
            Application.Run(program);

            /////////////////////////////////////////код выше трогать запрещено//////////////////////////////////////////////////////
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


            /*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   ВАЖНО!!! 1) Писать свой код ТОЛЬКО в функции Main(), находящейся в TaskM.cs, так как она отвечает за дальнейшую обработку программы 
            2) Всё что выше трогать категорически запрещено для правильной работы программы (также касается других частей программ, которые не разрешено изменять) 
            3) Переключатель деббагера isDebug (по надобности) и строку версии version (в соответствии с правилами) можно изменять 
            4) Обязательным условием является использование LogState(string message) вместо Console.Write 
            - message в Logstate(string message) должна иметь формат "({Код_Ошибки}{Номер_ошики}) {Сообщение_Об_Ошибке}", если это предупреждение или сообщение об ошибке 
            - ({Код_Ошибки}{Номер_ошики}) должен быть уникальным у каждой ошибки/предупреждения
            - Если это обычное сообщение просто для теста или наблюдения за поведением программы, формат соблюдать необязательно 
            6) Для разработки формы использовать только TaskM.cs и все ему прилежащие файлы 
            7) При использовании Get-функций не забывайте, что полученная структура является независимой от датабазы единицей, поэтому её следует интегрировать в датабазу после работы с ней 
            8) Форму Logger трогать категорически запрещено (убрать её можно лишь вручную закрыв или поставив значение isDebug на false) 
            9) Работать с Database.Date(string date) с осторожностью: 
            - Первым делом она пробует формат "dd.MM.yyyy hh:mm" 
            - При неудаче форматирует как "yyyy.MM.dd hh:mm" 
            - В остальных случаях может выдать ошибку с последующим выходом из программы 
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
        }
    }
}